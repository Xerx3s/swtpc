2023-01-26 12:01:33,768 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (5,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 81, in generate_swarm
    pos = center * np.random.uniform(
  File "mtrand.pyx", line 1134, in numpy.random.mtrand.RandomState.uniform
  File "_common.pyx", line 600, in numpy.random._common.cont
  File "_common.pyx", line 517, in numpy.random._common.cont_broadcast_2
  File "__init__.pxd", line 741, in numpy.PyArray_MultiIterNew3
ValueError: shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (50, 5) and arg 1 with shape (50, 3).
2023-01-26 12:02:44,764 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:04:49,543 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:13:22,604 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (11,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 81, in generate_swarm
    pos = center * np.random.uniform(
  File "mtrand.pyx", line 1134, in numpy.random.mtrand.RandomState.uniform
  File "_common.pyx", line 600, in numpy.random._common.cont
  File "_common.pyx", line 517, in numpy.random._common.cont_broadcast_2
  File "__init__.pxd", line 741, in numpy.PyArray_MultiIterNew3
ValueError: shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (50, 11) and arg 1 with shape (50, 3).
2023-01-26 12:22:08,620 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:23:07,296 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:24:32,660 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:25:54,811 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:28:04,624 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:29:52,951 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:31:25,425 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:31:55,751 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:32:53,345 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:38:48,256 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:43:56,120 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:44:25,415 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:48:02,496 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:48:48,941 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:50:06,387 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:50:30,608 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:51:29,801 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:54:15,147 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:54:24,094 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 12:55:45,961 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 13:02:40,370 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 13:04:00,558 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 13:04:47,873 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (1,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 81, in generate_swarm
    pos = center * np.random.uniform(
  File "mtrand.pyx", line 1134, in numpy.random.mtrand.RandomState.uniform
  File "_common.pyx", line 600, in numpy.random._common.cont
  File "_common.pyx", line 518, in numpy.random._common.cont_broadcast_2
  File "_common.pyx", line 245, in numpy.random._common.validate_output_shape
ValueError: Output size (1, 1) is not compatible with broadcast dimensions of inputs (1, 11).
2023-01-26 13:05:10,888 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 13:06:26,660 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 13:08:01,002 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3}
2023-01-26 13:08:01,014 - pyswarms.backend.operators - ERROR - Missing keyword in swarm.options
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/operators.py", line 130, in compute_velocity
    w = swarm.options["w"]
KeyError: 'w'
2023-01-26 13:09:16,659 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:09:17,316 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2.7035157680511475, best pos: [  8.44106456 577.64704632  19.13253245 352.08337126   0.57874535
  26.82785577  53.73010733   1.04908804  55.58120974  16.05559741
  48.61919145]
2023-01-26 13:11:34,197 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:11:34,854 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 20.11424446105957, best pos: [  8.3918822  741.14059054  88.48585122  96.46346761   0.78193231
  91.43571406 105.85112588   2.86224822  54.09698752  16.2044344
  55.10264365]
2023-01-26 13:12:52,456 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:12:53,263 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 12.262331008911133, best pos: [  8.97173242 761.94606441  74.59925547 318.72640149   0.84470777
  38.22740055 144.27424674   1.18205412  37.63877585  14.15805319
  37.2367023 ]
2023-01-26 13:14:16,791 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:14:17,690 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 16.169431686401367, best pos: [  8.4263613  369.55348004  76.3563243   60.67200101   0.8690495
  64.74117258 141.86710057   1.63123013  28.3624111   10.38065209
  50.33545865]
2023-01-26 13:14:34,157 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:14:35,209 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 11.551494598388672, best pos: [8.96697803e+00 8.22665952e+02 5.34512479e+01 2.79165275e+02
 6.50116418e-01 1.95347637e+00 7.22227320e+01 1.00089558e+00
 5.51121233e+01 1.09054203e+01 3.83626235e+01]
2023-01-26 13:15:20,087 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:15:20,745 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 21.105451583862305, best pos: [8.18572015e+00 6.61659288e+02 8.07913149e+01 2.77256046e+02
 9.85623889e-03 8.84316942e+01 1.84643172e+02 1.34880507e+00
 2.19097385e+01 1.86580284e+01 5.90588554e+01]
2023-01-26 13:16:45,516 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:16:46,167 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 9.960488319396973, best pos: [8.64928600e+00 3.94023592e+02 7.79028773e+01 1.02093620e+02
 2.41486770e-01 1.25553294e+01 1.92880896e+02 1.78490893e+00
 2.72576877e+01 1.85594019e+01 1.70780735e+01]
2023-01-26 13:17:12,014 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:17:12,673 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.415426254272461, best pos: [  8.3490981  395.42038861  95.05709444 390.22233128   1.08132477
   1.46275613 122.72958195   2.92574322  26.6972982   20.07211266
  38.39855821]
2023-01-26 13:18:30,589 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:18:31,246 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 3.8227291107177734, best pos: [  8.63835266 692.59929202   6.6236749  325.72267878   0.74615237
  45.74480154 116.01634771   1.75014909  37.57713288  18.94668494
  41.74435474]
2023-01-26 13:29:03,409 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:29:03,994 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 12.591286659240723, best pos: [  8.60160305 451.55612478  20.93797774 377.42067029   0.67372284
  62.13568312 127.15083553   2.49878205  48.94362804  11.15456171
  21.8691109 ]
2023-01-26 13:29:16,664 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:29:17,352 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 13.06200885772705, best pos: [  8.38925096 800.63184022 149.8823108   34.09585758   0.80486578
  66.75138544  73.8102532    1.91388941  47.91534655  13.73129584
  22.37411654]
2023-01-26 13:39:42,136 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (6,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:41:36,874 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:41:37,550 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 35.22361373901367, best pos: [8.84858426e+00 8.28305191e+02 1.16356807e+02 4.32496376e-01
 5.76680045e+01 8.10859279e+01 1.16471431e+02 1.76081587e+00
 3.09290572e+01 1.79950226e+01 8.33735899e+00]
2023-01-26 13:42:05,302 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:42:05,874 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 49.6057014465332, best pos: [  8.11905609 405.89428765  94.02795346   0.69532327 260.57415759
   9.56505776  64.86049578   2.42629077  43.16900356  10.56887616
  26.86998429]
2023-01-26 13:42:23,156 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:42:24,054 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 5.843199729919434, best pos: [  8.2352904  511.84909038  32.05861942   0.85587584 255.0761059
  53.98271681 119.7103089    1.55893674  55.62779957  10.53410316
  22.28079673]
2023-01-26 13:42:38,545 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:42:39,141 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 6.166795253753662, best pos: [8.29061654e+00 6.90760934e+02 1.47268679e+01 6.56335514e-01
 1.59180621e+02 6.59282853e+01 1.87667833e+02 2.21190290e+00
 5.57446212e+01 1.04508340e+01 7.85274655e+00]
2023-01-26 13:43:51,375 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (6,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:43:52,553 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:43:53,138 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 3.6725852489471436, best pos: [  8.16758461 495.62877229  45.69942003   0.51785733 319.16398718
  66.275758   135.33581402   1.2206563   38.52955555  18.50203237
  16.71133706]
2023-01-26 13:44:19,925 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (6,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:44:22,240 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:44:22,830 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.12675867974758148, best pos: [8.15585026e+00 7.13314585e+02 5.71792274e+01 3.05562983e-01
 2.88703499e+02 1.04804031e+01 6.46472157e+01 2.06002053e+00
 2.21802460e+01 1.95797033e+01 5.64056509e+01]
2023-01-26 13:46:22,549 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (6,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:46:24,819 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:46:25,411 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18.93194007873535, best pos: [8.15670268e+00 5.49930624e+02 1.32283070e+02 3.29102938e-01
 1.36526255e+02 5.88292504e+01 1.95616392e+02 1.72532248e+00
 5.53255085e+01 1.55990782e+01 5.89903083e+01]
2023-01-26 13:48:34,657 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (6,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:48:35,261 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (4,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:48:36,164 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:48:36,750 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.38915765285491943, best pos: [  8.24943769 535.17938142  42.72514364   0.7868827   47.99274311
  16.92179862 116.01455697   2.3341425   49.41448691  17.57617533
  20.79336979]
2023-01-26 13:48:57,225 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (6,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:48:57,837 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (4,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:48:58,669 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:48:59,245 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.515115737915039, best pos: [8.20148220e+00 8.18212670e+02 9.60556131e+00 8.97461771e-02
 3.04387669e+02 8.47766176e+00 7.90916965e+01 1.74076180e+00
 3.99536355e+01 1.75799138e+01 5.58286258e+01]
2023-01-26 13:49:21,011 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (6,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:49:21,618 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (4,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:49:23,702 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:49:24,277 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 14.33836841583252, best pos: [8.17820778e+00 4.60291198e+02 1.31764515e+02 4.03307904e-02
 3.48867232e+02 2.93802242e+00 1.15090835e+02 1.68574193e+00
 3.07253623e+01 1.92414506e+01 5.48120835e+00]
2023-01-26 13:51:10,344 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (4,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:51:11,212 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:51:11,789 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 13.588676452636719, best pos: [8.24151656e+00 5.28398600e+02 1.08588762e+02 4.94861099e-01
 2.25621419e+01 2.38511479e+01 1.53558844e+02 1.68560925e+00
 4.02530609e+01 1.36679111e+01 4.82068327e+01]
2023-01-26 13:53:42,619 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (6,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:53:43,224 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (4,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:53:43,637 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:53:44,221 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 17.34733009338379, best pos: [  8.15479465 667.39893491 141.93351507   0.70271781 215.62093899
  25.37847417 106.77939059   1.48356242  28.08475662  14.80898432
  25.57077854]
2023-01-26 13:54:22,140 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (6,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:54:23,298 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (4,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:54:24,190 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:54:24,792 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 17.942888259887695, best pos: [9.35776162e+00 6.64589423e+02 5.30621631e+01 2.57794966e-01
 3.93326075e+02 8.74769462e+01 1.61054112e+02 1.35052640e+00
 5.98589285e+01 1.29436009e+01 1.38420893e+01]
2023-01-26 13:56:15,413 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (6,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:56:17,212 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (4,)
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/pyswarms/backend/generators.py", line 74, in generate_swarm
    lb, ub = bounds
ValueError: too many values to unpack (expected 2)
2023-01-26 13:56:17,640 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 13:56:18,220 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2.354213237762451, best pos: [  8.18218801 502.53889547  24.51071942   0.69736307 379.68782488
  61.27465432  90.17966364   2.38026254  54.0191468   12.98507068
  52.52557209]
2023-01-26 14:02:13,222 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 14:02:13,819 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 926.9127807617188, best pos: [5.05327412e+02 4.56381684e+01 4.49001652e-01 1.58426203e+02
 2.33054598e+00 6.74402294e+00]
2023-01-26 14:02:14,030 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 14:02:14,605 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.756828308105469, best pos: [  9.21160186  42.02117412   1.07900132 337.33716241]
2023-01-26 14:02:14,861 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 14:02:15,429 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 44.38252258300781, best pos: [8.15383614e+00 3.58169046e+02 3.62987997e+01 2.56138739e-01
 8.08689697e+01 7.28759570e+01 8.59127887e+01 2.38053707e+00
 2.83109809e+01 1.35854708e+01 3.95583765e+01]
2023-01-26 14:02:40,204 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 14:02:41,159 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 333.9670104980469, best pos: [3.30892589e+02 3.51574490e+01 1.03598783e+00 3.23947634e+02
 4.17838045e+00 2.88049715e-02]
2023-01-26 14:02:41,835 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 14:02:42,456 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.31773962  46.04285007   0.86275364 332.66993971]
2023-01-26 14:02:42,717 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 14:02:43,345 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.5207552909851074, best pos: [8.20598725e+00 8.15841986e+02 5.17613763e+01 3.16142886e-01
 2.42128922e+02 2.27608176e+01 9.45777093e+01 1.80329112e+00
 4.36253853e+01 1.82526106e+01 5.02084914e+01]
2023-01-26 14:04:10,578 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 14:04:11,235 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 315.765380859375, best pos: [3.29284730e+02 3.80212674e+01 9.71749590e-01 8.47744316e+01
 8.35085196e-01 3.73615271e-02]
2023-01-26 14:04:11,815 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 14:04:12,426 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.53059507  37.36644504   0.95632289 347.05676691]
2023-01-26 14:04:12,685 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 14:04:13,317 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.5325369834899902, best pos: [8.22004817e+00 4.81239358e+02 2.25635258e+01 1.61056930e-01
 1.15404612e+02 3.06674577e+01 1.33568011e+02 2.10652063e+00
 3.96654251e+01 1.77489009e+01 3.73437926e+01]
2023-01-26 15:46:19,605 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:46:20,242 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 315.9493103027344, best pos: [3.26023659e+02 3.85772027e+01 6.22463356e-01 8.41040370e+01
 3.40113164e+00 3.42228889e-02]
2023-01-26 15:46:20,817 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:46:21,432 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.36843101  38.20773453   0.88503595 348.92441601]
2023-01-26 15:46:21,691 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:46:22,318 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.424503207206726, best pos: [  8.22674329 607.09358599  51.28661925   0.66295002 238.58379822
  26.12715559 128.72718415   2.02309455  46.1632501   10.84032084
  42.05494165]
2023-01-26 15:47:26,999 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:47:27,680 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 324.5609130859375, best pos: [3.33391845e+02 4.25613738e+01 9.64577211e-01 1.79528695e+02
 3.40184341e+00 2.01613241e-02]
2023-01-26 15:47:28,860 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:47:29,488 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.25869122  43.92232512   0.91734457 333.03124398]
2023-01-26 15:47:29,762 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:47:30,393 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -2.000929117202759, best pos: [8.21845942e+00 4.68171043e+02 4.54084550e+00 3.34424573e-01
 1.94793257e+02 9.64947202e+00 1.20916968e+02 2.10394242e+00
 3.04739778e+01 1.07752080e+01 5.25131857e+01]
2023-01-26 15:48:13,443 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:48:14,109 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 362.0929870605469, best pos: [3.38003686e+02 3.24586407e+01 7.18018924e-01 2.49182292e+02
 3.35770859e+00 2.97507786e-02]
2023-01-26 15:48:14,312 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:48:15,292 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.34428387  36.67776722   0.98721178 340.51376378]
2023-01-26 15:48:15,852 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:48:16,494 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.8023428916931152, best pos: [8.18219064e+00 8.22764953e+02 2.11303257e+01 5.50926354e-01
 3.85547894e+02 1.03408779e+01 8.07645102e+01 1.55554004e+00
 4.77985113e+01 1.19727423e+01 5.38233084e+01]
2023-01-26 15:55:14,858 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:55:15,496 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 323.7568054199219, best pos: [3.24039499e+02 3.67869322e+01 9.80863441e-01 1.31764960e+02
 5.26393373e+00 3.35117033e-02]
2023-01-26 15:55:15,703 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:55:16,335 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.29057969  35.32167153   0.79937793 338.75513508]
2023-01-26 15:55:16,593 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:55:17,227 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.8001024723052979, best pos: [8.21332272e+00 4.74747301e+02 1.77487043e+01 1.09165482e-01
 3.23964886e+02 2.01754341e+01 1.37424554e+02 1.94463899e+00
 3.61087865e+01 1.15720401e+01 5.25228252e+01]
2023-01-26 15:57:02,522 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:57:03,456 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 324.5609130859375, best pos: [3.25088516e+02 4.67687406e+01 8.21011749e-01 1.87640119e+02
 2.86257139e+00 2.97665639e-02]
2023-01-26 15:57:04,073 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:57:04,684 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.28346762  40.86518554   0.87453398 333.80936968]
2023-01-26 15:57:04,943 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:57:05,567 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.8001024723052979, best pos: [  8.20214951 464.53296126  37.22424779   0.69666149 111.52468879
  31.57054933  87.59368162   2.47868926  39.43341584  12.38692678
  55.68049868]
2023-01-26 15:57:19,955 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:57:20,615 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 364.3113098144531, best pos: [3.60842196e+02 3.84631017e+01 3.31674117e-01 5.15111243e+01
 1.29191611e+00 9.24448793e-03]
2023-01-26 15:57:20,816 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:57:21,425 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.43983418  45.41540926   0.7839514  344.72564757]
2023-01-26 15:57:21,696 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 15:57:22,327 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.8023428916931152, best pos: [8.16844683e+00 8.18871048e+02 2.85135416e+01 5.02320509e-01
 2.06087032e+02 3.48130627e+01 1.02792595e+02 2.33153948e+00
 3.41679781e+01 1.20854696e+01 5.79318938e+01]
2023-01-26 16:25:31,463 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:25:32,363 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 317.37762451171875, best pos: [3.30951041e+02 3.82616105e+01 7.58406681e-01 3.13211140e+01
 3.17755462e+00 4.39743648e-03]
2023-01-26 16:25:33,036 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:25:33,651 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.53796522  38.40109214   0.90332682 332.67306143]
2023-01-26 16:25:33,924 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:25:34,558 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.7021936178207397, best pos: [8.19882282e+00 8.23374915e+02 4.31059488e+01 2.45345083e-01
 3.14851791e+02 2.68249142e+01 1.28488298e+02 2.20220334e+00
 2.51732263e+01 1.13808432e+01 3.75762043e+01]
2023-01-26 16:56:01,168 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:56:01,793 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 345.0224609375, best pos: [3.31413168e+02 2.18271342e+01 6.50199419e-01 2.63127452e+02
 5.89417573e+00 1.08691498e-01]
2023-01-26 16:56:02,001 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:56:02,987 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.29569363  35.27346086   0.85620258 338.76135023]
2023-01-26 16:56:03,407 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:56:04,043 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.7066718339920044, best pos: [8.23111494e+00 4.64797333e+02 4.68257335e+00 7.39605123e-02
 3.20843743e+02 3.52827630e+01 1.11216211e+02 1.97369951e+00
 3.39900473e+01 1.40670131e+01 4.81364108e+01]
2023-01-26 16:56:55,415 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:56:56,264 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 323.5203857421875, best pos: [3.25759801e+02 3.74423928e+01 5.96299241e-01 8.47428160e+01
 6.42302441e+00 3.35218628e-02]
2023-01-26 16:56:57,155 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:56:57,767 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.32933378  36.73031609   0.81992388 337.52295588]
2023-01-26 16:56:58,041 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:56:58,669 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.5176960229873657, best pos: [8.16511869e+00 8.21095035e+02 4.31701918e+01 5.47192433e-01
 2.80498733e+02 3.24372471e+01 9.03280334e+01 1.98019653e+00
 4.08802292e+01 1.68233208e+01 5.35014144e+01]
2023-01-26 16:56:59,127 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:57:00,043 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:57:00,588 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:57:41,178 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:57:41,818 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 331.3963317871094, best pos: [3.31134899e+02 2.13654407e+01 1.05450395e+00 2.54343888e+02
 7.07977924e+00 4.35273913e-04]
2023-01-26 16:57:42,021 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:57:42,674 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.34338521  38.87846615   0.81044935 335.36201723]
2023-01-26 16:57:42,930 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:57:43,566 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -2.2201027870178223, best pos: [  8.23846263 457.22735631   5.16470134   0.75213224 146.15275772
   4.35564276 130.97806702   2.99191291  41.98057918  12.05140977
  56.6547215 ]
2023-01-26 16:57:44,019 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:57:44,935 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:57:45,480 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 17:01:12,763 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 17:01:13,398 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 326.246826171875, best pos: [3.24516778e+02 2.75741903e+01 6.29512884e-01 2.59472233e+02
 4.89972867e+00 4.62951332e-02]
2023-01-26 17:01:13,711 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 17:01:14,320 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.47013038  35.23480908   0.84769992 347.71694278]
2023-01-26 17:01:14,578 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 17:01:15,210 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.5325369834899902, best pos: [8.15550887e+00 4.79053313e+02 3.91020678e+01 2.45862348e-01
 1.66584095e+02 1.43348363e+01 1.23722768e+02 2.10609549e+00
 3.26218770e+01 1.82593523e+01 3.84542356e+01]
2023-01-26 17:01:15,664 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 17:01:16,280 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 325.60174560546875, best pos: [3.21968777e+02 3.44593346e+01 5.67583265e-01 2.54433325e+02
 1.91825434e+00 3.38266702e-02]
2023-01-26 17:01:16,673 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 17:01:17,277 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.53505226  44.22231035   1.0911504  348.78387357]
2023-01-26 17:01:17,799 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 17:01:18,531 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.733392357826233, best pos: [8.22382372e+00 8.27397796e+02 4.09799104e+01 5.71754956e-02
 2.12228400e+02 3.97687454e+01 1.04866156e+02 1.60127212e+00
 4.46012738e+01 1.23388449e+01 5.15245060e+01]
2023-01-26 17:01:48,603 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 17:01:49,231 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 331.83929443359375, best pos: [3.31107741e+02 2.85936353e+01 3.54460067e-01 2.04160954e+02
 6.61136839e-01 3.62084415e-02]
2023-01-26 17:01:50,582 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 17:01:51,199 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.37490904  40.28418713   0.85712409 342.17891463]
2023-01-26 17:01:51,455 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 17:01:52,084 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.6496797800064087, best pos: [8.19210473e+00 6.16869736e+02 3.71287977e+00 3.33181392e-01
 2.11816076e+02 3.27475037e+01 1.15345488e+02 2.73195873e+00
 4.42923012e+01 1.30322417e+01 4.38074855e+01]
2023-01-26 17:01:52,545 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 17:01:53,167 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 326.4745178222656, best pos: [3.27467856e+02 2.85813316e+01 3.28368713e-01 1.89778028e+02
 2.64527966e+00 3.53461459e-02]
2023-01-26 17:01:53,682 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 17:01:54,320 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.669471740722656, best pos: [  9.3698177   36.92789651   0.97124092 329.78636012]
2023-01-26 17:01:54,823 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 17:01:55,458 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1.8001024723052979, best pos: [  8.1792517  483.83507297  41.8175547    0.57247546 220.28141466
  22.44121619 111.79053189   1.9404455   32.73154377  11.62789988
  57.90236035]
2023-01-26 16:12:18,043 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/models.py changed, reloading.
2023-01-26 16:12:27,841 - django.request - WARNING - Not Found: /favicon.ico
2023-01-26 16:14:03,135 - django.utils.autoreload - INFO - /opt/django/backend/backend/urls.py changed, reloading.
2023-01-26 16:14:15,767 - django.utils.autoreload - INFO - /opt/django/backend/backend/urls.py changed, reloading.
2023-01-26 16:14:31,715 - django.request - ERROR - Internal Server Error: /opt_tur/
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/base.py", line 220, in _get_response
    response = response.render()
  File "/usr/local/lib/python3.10/dist-packages/django/template/response.py", line 114, in render
    self.content = self.rendered_content
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/response.py", line 70, in rendered_content
    ret = renderer.render(self.data, accepted_media_type, context)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/renderers.py", line 723, in render
    context = self.get_context(data, accepted_media_type, renderer_context)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/renderers.py", line 695, in get_context
    'post_form': self.get_rendered_html_form(data, view, 'POST', request),
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/renderers.py", line 510, in get_rendered_html_form
    return self.render_form_for_serializer(serializer)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/renderers.py", line 518, in render_form_for_serializer
    serializer.data,
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 555, in data
    ret = super().data
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 257, in data
    self._data = self.get_initial()
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 405, in get_initial
    for field in self.fields.values()
  File "/usr/local/lib/python3.10/dist-packages/django/utils/functional.py", line 57, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 356, in fields
    for key, value in self.get_fields().items():
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 1076, in get_fields
    field_class, field_kwargs = self.build_field(
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 1222, in build_field
    return self.build_unknown_field(field_name, model_class)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 1340, in build_unknown_field
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: Field name `initial_EC_maxinitial_turbidity_min` is not valid for model `optimizeTurData`.
2023-01-26 16:15:15,759 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/serializers.py changed, reloading.
2023-01-26 16:15:25,310 - django.request - WARNING - Method Not Allowed: /opt_tur/
2023-01-26 16:16:13,611 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/serializers.py changed, reloading.
2023-01-26 16:16:39,924 - django.request - ERROR - Internal Server Error: /opt_tur/
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/base.py", line 220, in _get_response
    response = response.render()
  File "/usr/local/lib/python3.10/dist-packages/django/template/response.py", line 114, in render
    self.content = self.rendered_content
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/response.py", line 70, in rendered_content
    ret = renderer.render(self.data, accepted_media_type, context)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/renderers.py", line 723, in render
    context = self.get_context(data, accepted_media_type, renderer_context)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/renderers.py", line 695, in get_context
    'post_form': self.get_rendered_html_form(data, view, 'POST', request),
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/renderers.py", line 510, in get_rendered_html_form
    return self.render_form_for_serializer(serializer)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/renderers.py", line 518, in render_form_for_serializer
    serializer.data,
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 555, in data
    ret = super().data
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 257, in data
    self._data = self.get_initial()
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 405, in get_initial
    for field in self.fields.values()
  File "/usr/local/lib/python3.10/dist-packages/django/utils/functional.py", line 57, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 356, in fields
    for key, value in self.get_fields().items():
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 1076, in get_fields
    field_class, field_kwargs = self.build_field(
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 1222, in build_field
    return self.build_unknown_field(field_name, model_class)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/serializers.py", line 1340, in build_unknown_field
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: Field name `flocculant` is not valid for model `optimizeTurData`.
2023-01-26 16:17:29,717 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/models.py changed, reloading.
2023-01-26 16:17:39,078 - django.request - WARNING - Method Not Allowed: /opt_tur/
2023-01-26 16:18:53,569 - django.request - ERROR - Internal Server Error: /opt_tur/
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/generic/base.py", line 103, in view
    return self.dispatch(request, *args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/opt/django/backend/floc_analyzer/views.py", line 153, in post
    output, best_param = inputoptimization(
  File "/opt/django/backend/floc_analyzer/scripts/main.py", line 86, in inputoptimization
    output, best_param = minimize(pipe=pipe, pred_type=pred_type, bounds=bounds)
  File "/opt/django/backend/floc_analyzer/scripts/modules/pso.py", line 23, in minimize
    bounds["floc_saline_Molarity"][0],
KeyError: 'floc_saline_Molarity'
2023-01-26 16:20:12,815 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/views.py changed, reloading.
2023-01-26 16:20:26,019 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:20:26,770 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 426.2123718261719, best pos: [316.07719048  36.51718865   0.6360109  170.89236284   5.33791892
   0.51199503]
2023-01-26 16:20:26,902 - django.request - ERROR - Internal Server Error: /opt_tur/
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/generic/base.py", line 103, in view
    return self.dispatch(request, *args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/opt/django/backend/floc_analyzer/views.py", line 167, in post
    "floc_cactus_share": best_param[6],
IndexError: index 6 is out of bounds for axis 0 with size 6
2023-01-26 16:25:29,096 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/views.py changed, reloading.
2023-01-26 16:25:39,579 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:25:40,350 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 425.52728271484375, best pos: [327.94543484  30.85598663   0.51603939 238.46834613   5.06020385
   0.52009766]
2023-01-26 16:26:25,442 - django.request - WARNING - Method Not Allowed: /opt_tur/
2023-01-26 16:26:33,121 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:26:33,863 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.700768947601318, best pos: [  8.38827908  27.29569858   0.6371866  185.00482549]
2023-01-26 16:26:47,446 - django.request - WARNING - Method Not Allowed: /opt_tur/
2023-01-26 16:26:52,892 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:26:53,760 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 12.568632125854492, best pos: [  8.2065882  471.93955274 130.95337658   0.80483132 233.56439576
  25.23756445 130.25298389   2.14303697  37.05209256  10.29054205
  55.20100639]
2023-01-26 16:26:54,005 - django.request - ERROR - Internal Server Error: /opt_tur/
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/generic/base.py", line 103, in view
    return self.dispatch(request, *args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/opt/django/backend/floc_analyzer/views.py", line 193, in post
    "duration_sedimetation_phase": best_param[11],
IndexError: index 11 is out of bounds for axis 0 with size 11
2023-01-26 16:28:26,819 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/views.py changed, reloading.
2023-01-26 16:28:38,123 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-26 16:28:39,180 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 12.568632125854492, best pos: [  8.16505526 478.29542413 130.79442093   0.83472627 211.59002245
  22.11940215 118.76686603   1.54683238  32.51690541   4.86349515
  53.0603131 ]
2023-01-26 16:32:18,010 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/models.py changed, reloading.
2023-01-26 16:41:40,689 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/scripts/main.py changed, reloading.
2023-01-26 16:42:07,074 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/models.py changed, reloading.
2023-01-26 16:43:14,523 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/views.py changed, reloading.
2023-01-26 16:44:03,873 - django.utils.autoreload - INFO - /opt/django/backend/backend/urls.py changed, reloading.
2023-01-26 16:44:37,361 - django.request - WARNING - Not Found: /list_bounds/
2023-01-26 16:44:45,737 - django.request - ERROR - Internal Server Error: /bounds/
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/generic/base.py", line 103, in view
    return self.dispatch(request, *args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/opt/django/backend/floc_analyzer/views.py", line 24, in get
    data = get_bounds()
  File "/opt/django/backend/floc_analyzer/models.py", line 26, in get_bounds
    bounds[index] = [value, ub[index]+0.1]
TypeError: can only concatenate str (not "float") to str
2023-01-26 16:46:47,414 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/models.py changed, reloading.
2023-01-26 16:46:55,443 - django.request - ERROR - Internal Server Error: /bounds/
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/generic/base.py", line 103, in view
    return self.dispatch(request, *args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/opt/django/backend/floc_analyzer/views.py", line 24, in get
    data = get_bounds()
  File "/opt/django/backend/floc_analyzer/models.py", line 26, in get_bounds
    if type(bounds[index]) == (float or int):
KeyError: 'id'
2023-01-26 16:47:27,033 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/models.py changed, reloading.
2023-01-26 16:47:34,832 - django.request - ERROR - Internal Server Error: /bounds/
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/generic/base.py", line 103, in view
    return self.dispatch(request, *args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/opt/django/backend/floc_analyzer/views.py", line 24, in get
    data = get_bounds()
  File "/opt/django/backend/floc_analyzer/models.py", line 28, in get_bounds
    if type(bounds[index]) == (float or int):
KeyError: 'id'
2023-01-26 16:49:16,737 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/models.py changed, reloading.
2023-01-26 16:51:14,836 - django.request - ERROR - Internal Server Error: /bounds/
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/generic/base.py", line 103, in view
    return self.dispatch(request, *args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/opt/django/backend/floc_analyzer/views.py", line 24, in get
    data = get_bounds()
  File "/opt/django/backend/floc_analyzer/models.py", line 22, in get_bounds
    df.drop("id", inplace=True)
  File "/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py", line 331, in wrapper
    return func(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py", line 5396, in drop
    return super().drop(
  File "/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py", line 331, in wrapper
    return func(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py", line 4505, in drop
    obj = obj._drop_axis(labels, axis, level=level, errors=errors)
  File "/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py", line 4546, in _drop_axis
    new_axis = axis.drop(labels, errors=errors)
  File "/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py", line 6977, in drop
    raise KeyError(f"{list(labels[mask])} not found in axis")
KeyError: "['id'] not found in axis"
2023-01-26 16:51:55,861 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/models.py changed, reloading.
2023-01-26 16:52:04,151 - django.request - ERROR - Internal Server Error: /bounds/
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/generic/base.py", line 103, in view
    return self.dispatch(request, *args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/opt/django/backend/floc_analyzer/views.py", line 24, in get
    data = get_bounds()
  File "/opt/django/backend/floc_analyzer/models.py", line 22, in get_bounds
    df.drop(column="id", inplace=True)
  File "/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py", line 331, in wrapper
    return func(*args, **kwargs)
TypeError: DataFrame.drop() got an unexpected keyword argument 'column'
2023-01-26 16:52:36,753 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/models.py changed, reloading.
2023-01-26 16:52:48,626 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/models.py changed, reloading.
2023-01-26 16:52:58,776 - django.request - ERROR - Internal Server Error: /bounds/
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/generic/base.py", line 103, in view
    return self.dispatch(request, *args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/opt/django/backend/floc_analyzer/views.py", line 24, in get
    data = get_bounds()
  File "/opt/django/backend/floc_analyzer/models.py", line 29, in get_bounds
    if type(bounds[index]) == (float or int):
KeyError: 'surface_water'
2023-01-26 16:54:47,956 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/models.py changed, reloading.
2023-01-26 16:54:54,358 - django.request - ERROR - Internal Server Error: /bounds/
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.10/dist-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/django/views/generic/base.py", line 103, in view
    return self.dispatch(request, *args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/usr/local/lib/python3.10/dist-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/opt/django/backend/floc_analyzer/views.py", line 24, in get
    data = get_bounds()
  File "/opt/django/backend/floc_analyzer/models.py", line 29, in get_bounds
    if type(bounds[index]) == (float or int):
KeyError: 'initial_pH'
2023-01-26 16:55:04,947 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/models.py changed, reloading.
2023-01-26 16:55:30,383 - django.utils.autoreload - INFO - /opt/django/backend/floc_analyzer/models.py changed, reloading.
